services:
  log-ingest:
    image: log_panda_log_ingest_i
    container_name: log_panda_log_ingest_c
    build:
      context: ./apps/log-ingest
    ports:
      - "3003:8080"
    environment:
      PORT: 8080
    depends_on:
      log-ingest-kafka-init:    # ✅ ensure topics exist before producer starts
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:8080/health"]
      interval: 5s
      timeout: 3s
      retries: 3
      start_period: 2s
    networks:
      - log_panda_network

  log-ingest-kafka:
    image: log_panda_log_ingest_kafka_i
    container_name: log_panda_log_ingest_kafka_c
    build:
      context: .
      dockerfile: ./docker/kafka.Dockerfile
    ports:
      - "9092:9092"
    environment:
      KAFKA_ENABLE_KRAFT: yes
      KAFKA_CFG_PROCESS_ROLES: broker,controller
      KAFKA_CFG_NODE_ID: 1
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 1@log-ingest-kafka:9093
      KAFKA_CFG_LISTENERS: PLAINTEXT://:9092,CONTROLLER://:9093
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://log-ingest-kafka:9092
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_LOG_DIRS: /bitnami/kafka/data
    volumes:
      - log_panda_kafka_data_v:/bitnami/kafka
    networks:
      - log_panda_network
    healthcheck:
      test: ["CMD", "kafka-topics.sh", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 10s
      timeout: 5s
      retries: 10


  log-ingest-kafka-init:
    image: log_panda_log_ingest_kafka_init_i
    container_name: log_panda_log_ingest_kafka_init_c
    build:
      context: .
      dockerfile: ./docker/kafka.Dockerfile
    depends_on:
      log-ingest-kafka:
        condition: service_healthy
    networks:
      - log_panda_network
    entrypoint: [ '/bin/sh', '-c' ]
    command: |
      "
      # blocks until kafka is reachable
      kafka-topics.sh --bootstrap-server log-ingest-kafka:9092 --list

      echo -e 'Creating kafka topics'
      kafka-topics.sh --bootstrap-server log-ingest-kafka:9092 --create --if-not-exists --topic log-ingest-topic --replication-factor 1 --partitions 3
      
      echo -e 'Successfully created the following topics:'
      kafka-topics.sh --bootstrap-server log-ingest-kafka:9092 --list
      "


  log-db-ingest:
    image: log_panda_log_db_ingest_i
    container_name: log_panda_log_db_ingest_c
    build:
      context: ./apps/log-db-ingest
    environment:
      PORT: 8080
      NODE_ENV: production
      DB_HOST: log-db-postgres
      DB_PORT: 5432
      DB_USERNAME: log_panda_db_user
      DB_PASSWORD: ptm_pg_2024
      DB_DATABASE: log_panda
    depends_on:
      log-ingest-kafka-init:    # ✅ ensure topics exist before consumer starts
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:8080/health"]
      interval: 5s
      timeout: 3s
      retries: 3
      start_period: 2s
    networks:
      - log_panda_network
    restart: unless-stopped

# create multiple services of log-db-ingest, to have multiple consumers
# within the same consumer-group

networks:
  log_panda_network:
    driver: bridge
    name: log_panda_network_n

  
volumes:
  log_panda_kafka_data_v: